# ai-story-weaver – Next.js 14 (App Router)

> **v0.4 – Role/Scene Selector • Choice Branch • Achievements bar**

---
## 新增/修改檔案
```
app/
├─ page.tsx                 # Home ➜ Playground flows
├─ api/
│   ├─ story/route.ts        # unchanged
│   └─ branch/route.ts       # ★ new – continue story based on choice
components/
├─ RoleScenePanel.tsx        # ★ new – replace KeywordInput
├─ GeneratePanel.tsx         # ★ new – story/music buttons
├─ ChoiceBranch.tsx          # ★ new – inline branch buttons
├─ AchievementsBar.tsx       # ★ new – saved stickers
├─ KeywordInput.tsx          # kept for fallback
└─ ... (others unchanged)
```

---
## components/RoleScenePanel.tsx
```tsx
"use client";
import { useState } from "react";

const roles = ["王子", "公主", "矮人", "精靈", "獨角獸", "女巫"];
const scenes = ["森林", "城堡", "海洋", "太空"];

export default function RoleScenePanel({ onReady }: { onReady: (roles: string[], scene: string) => void }) {
  const [selRoles, setSelRoles] = useState<string[]>([]);
  const [scene, setScene] = useState("");

  function toggleRole(r: string) {
    setSelRoles((arr) =>
      arr.includes(r) ? arr.filter((x) => x !== r) : arr.length < 3 ? [...arr, r] : arr
    );
  }
  return (
    <div className="space-y-4 p-4 bg-white/70 rounded-2xl shadow">
      <h3 className="font-bold">選角色 (最多 3)</h3>
      <div className="flex flex-wrap gap-2">
        {roles.map((r) => (
          <button
            key={r}
            onClick={() => toggleRole(r)}
            className={`px-3 py-1 rounded-full border ${selRoles.includes(r) ? "bg-brandYellow" : "bg-white"}`}
          >
            {r}
          </button>
        ))}
      </div>

      <h3 className="font-bold mt-4">選場景</h3>
      <div className="flex gap-2">
        {scenes.map((s) => (
          <button
            key={s}
            onClick={() => setScene(s)}
            className={`px-3 py-1 rounded-full border ${scene === s ? "bg-brandYellow" : "bg-white"}`}
          >
            {s}
          </button>
        ))}
      </div>

      <button
        disabled={!selRoles.length || !scene}
        onClick={() => onReady(selRoles, scene)}
        className="mt-4 w-full bg-brandYellow font-bold py-2 rounded-xl disabled:opacity-40"
      >
        下一步 →
      </button>
    </div>
  );
}
```

---
## components/GeneratePanel.tsx
```tsx
"use client";
export default function GeneratePanel({ onStory }: { onStory: () => void }) {
  return (
    <div className="flex gap-4 mt-6">
      <button onClick={onStory} className="flex-1 bg-brandYellow py-2 rounded-xl font-bold shadow">
        生成故事
      </button>
      {/* 預留音樂 */}
      {/* <button disabled className="flex-1 bg-gray-300 py-2 rounded-xl font-bold opacity-60">生成音樂</button> */}
    </div>
  );
}
```

---
## components/ChoiceBranch.tsx
```tsx
"use client";
export default function ChoiceBranch({ options, onPick }: { options: string[]; onPick: (c: string) => void }) {
  if (!options.length) return null;
  return (
    <div className="mt-4 flex gap-4">
      {options.map((o) => (
        <button key={o} onClick={() => onPick(o)} className="flex-1 bg-brandYellow py-2 rounded-xl font-bold">
          {o}
        </button>
      ))}
    </div>
  );
}
```

---
## components/AchievementsBar.tsx
```tsx
"use client";
import { useEffect, useState } from "react";
export default function AchievementsBar() {
  const [badges, setBadges] = useState<string[]>([]);
  useEffect(() => {
    const arr = JSON.parse(localStorage.getItem("badges") || "[]");
    setBadges(arr);
  }, []);
  if (!badges.length) return null;
  return (
    <div className="fixed bottom-4 right-4 bg-white/80 rounded-full shadow px-4 py-2 flex gap-2 text-xl">
      {badges.map((b, i) => (
        <span key={i}>{b}</span>
      ))}
    </div>
  );
}
```

---
## app/api/branch/route.ts
```ts
import { NextRequest, NextResponse } from "next/server";
import { createOpenAI } from "@/lib/openai";
export const runtime = "edge";

export async function POST(req: NextRequest) {
  const { storySoFar, choice } = await req.json();
  const openai = createOpenAI();
  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0.9,
    max_tokens: 200,
    messages: [
      { role: "system", content: "你是一位兒童故事接龍作家，延續已有故事並根據孩子的選擇給出下一段，最後不要總結也不要說完結。" },
      { role: "user", content: `已有故事：${storySoFar}\n孩子選擇：${choice}\n請續寫 1 段。` },
    ],
  });
  return NextResponse.json({ nextPart: completion.choices[0].message.content });
}
```

---
## app/page.tsx (關鍵片段)
```tsx
import { useState } from "react";
import HeroSection from "@/components/HeroSection";
import FeaturesSection from "@/components/FeaturesSection";
import RoleScenePanel from "@/components/RoleScenePanel";
import GeneratePanel from "@/components/GeneratePanel";
import StoryMeta from "@/components/StoryMeta";
import StoryDisplay from "@/components/StoryDisplay";
import ChoiceBranch from "@/components/ChoiceBranch";
import AchievementsBar from "@/components/AchievementsBar";

export default function Home() {
  const [roles, setRoles] = useState<string[]>([]);
  const [scene, setScene] = useState("");
  const [story, setStory] = useState("");
  const [meta, setMeta] = useState<any>({});
  const [branchOpts, setBranchOpts] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);

  const generateStory = async () => {
    setLoading(true);
    const res = await fetch("/api/story", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ keywords: [...roles, scene], lang: "zh", opts: { tone: "fun", length: 300, age: "3-5", title: "", moral: "" } }),
    });
    const data = await res.json();
    setStory(data.story);
    setMeta({ lang: "zh", title: data.title, moral: data.moral });
    // 偵測[選項]占位符：格式 <<A|B>>
    const match = data.story.match(/<<([^>]+)>>/);
    setBranchOpts(match ? match[1].split("|") : []);
    setLoading(false);
  };

  const pickBranch = async (choice: string) => {
    setLoading(true);
    const res = await fetch("/api/branch", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ storySoFar: story, choice }),
    });
    const data = await res.json();
    setStory(story + "\n\n" + data.nextPart);
    setBranchOpts([]);
    // 獎勵徽章範例
    const badges = JSON.parse(localStorage.getItem("badges") || "[]");
    badges.push("🏅");
    localStorage.setItem("badges", JSON.stringify(badges.slice(-5)));
    setLoading(false);
  };

  return (
    <>
      <HeroSection />
      <FeaturesSection />
      <section id="play" className="pt-16 space-y-6">
        {!roles.length ? (
          <RoleScenePanel onReady={(r, s) => { setRoles(r); setScene(s); }} />
        ) : !story ? (
          <GeneratePanel onStory={generateStory} />
        ) : (
          <>
            <StoryMeta story={story} meta={meta} />
            <StoryDisplay story={story} />
            <ChoiceBranch options={branchOpts} onPick={pickBranch} />
          </>
        )}
        {loading && <p className="animate-pulse">處理中…</p>}
      </section>
      <AchievementsBar />
    </>
  );
}
```

---
### 使用方式
1. 角色×場景 → 下一步
2. 點「生成故事」→ 若 GPT 含 `<<冒險|回家>>` 這類標記，畫面會顯示兩顆按鈕
3. 小朋友選擇→ `/api/branch` 續寫下一段
4. 完成一次分支即送一枚 🏅 徽章（示範用）

🌟 **Pull → test → push → Vercel**，即可體驗簡易互動分支與成就！
