# ai-story-weaver – Next.js 14 (App Router)

> **v0.3 – 新增 Landing Hero & Features 區塊**

---
## 目錄
```
app/
├─ layout.tsx
├─ page.tsx                # 首頁 (Hero ➜ Features ➜ Generator)
├─ story/[id]/page.tsx
├─ saved/page.tsx
│
├─ api/
│   └─ story/route.ts
│
components/
├─ KeywordInput.tsx
├─ AdvancedOptions.tsx
├─ StoryMeta.tsx
├─ StoryDisplay.tsx
├─ SavedStories.tsx
├─ HeroSection.tsx          # ★ 新增
└─ FeaturesSection.tsx      # ★ 新增 (+ 內嵌 FeatureCard)
utils/
└─ helpers.ts
```

---
## components/HeroSection.tsx
```tsx
export default function HeroSection() {
  return (
    <section id="hero" className="w-full py-24 text-center bg-gradient-to-b from-brandBlue to-white">
      <h1 className="text-4xl md:text-5xl font-extrabold mb-4">
        讓童年回歸創造力——AI故事積木
      </h1>
      <p className="text-lg md:text-xl mb-8">開啟無限冒險！</p>
      <a
        href="#play"
        className="inline-block bg-brandYellow text-black font-bold py-3 px-6 rounded-xl shadow hover:opacity-90 transition"
      >
        立即體驗
      </a>
    </section>
  );
}
```

---
## components/FeaturesSection.tsx
```tsx
const features = [
  { icon: "🧱", title: "積木組合，由你決定", desc: "每個彩色積木都是故事的起點，冒險由孩子主導。" },
  { icon: "🙌", title: "無螢幕互動，啟動真實想像", desc: "遠離手機，專注雙手與現場，純粹創作。" },
  { icon: "🤖", title: "AI智慧故事引擎", desc: "角色與場景任意組合，AI 即時生成專屬故事。" },
  { icon: "🔧", title: "STEAM素養全方位成長", desc: "語言、邏輯、情緒同理心在遊戲中自然養成。" },
  { icon: "🛡️", title: "安全設計，爸媽安心", desc: "安全無毒材質 + App 監控學習進度。" }
];

function FeatureCard({ f }: { f: (typeof features)[0] }) {
  return (
    <div className="bg-white/70 p-6 rounded-2xl shadow flex flex-col items-start">
      <div className="text-3xl mb-3">{f.icon}</div>
      <h3 className="font-bold mb-2">{f.title}</h3>
      <p className="text-sm opacity-80">{f.desc}</p>
    </div>
  );
}

export default function FeaturesSection() {
  return (
    <section id="features" className="py-16">
      <div className="grid gap-6 md:grid-cols-3">
        {features.map((f, i) => (
          <FeatureCard key={i} f={f} />
        ))}
      </div>
      <p className="text-xs opacity-60 mt-6">
        * 下方示意圖中角色的立體投影僅供視覺展示，實際產品為積木搭配 AI 互動故事，不具備投影功能。
      </p>
    </section>
  );
}
```

---
## app/page.tsx  (完整覆寫)
```tsx
import { useState } from "react";
import HeroSection from "@/components/HeroSection";
import FeaturesSection from "@/components/FeaturesSection";
import KeywordInput from "@/components/KeywordInput";
import AdvancedOptions from "@/components/AdvancedOptions";
import StoryMeta from "@/components/StoryMeta";
import StoryDisplay from "@/components/StoryDisplay";

export default function Home() {
  const [story, setStory] = useState("");
  const [meta, setMeta] = useState<any>({});
  const [loading, setLoading] = useState(false);
  const [advOpts, setAdvOpts] = useState<any>({ tone: "fun", length: 300, age: "3-5", title: "", moral: "" });

  const generate = async (keywords: string[], lang: string, opts: any) => {
    if (!keywords.length) return;
    setLoading(true);
    const res = await fetch("/api/story", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ keywords, lang, opts }),
    });
    const data = await res.json();
    setStory(data.story);
    setMeta({ lang, ...opts, title: data.title || opts.title, moral: data.moral || opts.moral });
    setLoading(false);
  };

  return (
    <>
      <HeroSection />
      <FeaturesSection />

      {/* Story Generator */}
      <section id="play" className="pt-16">
        <KeywordInput onGenerate={(k, l) => generate(k, l, advOpts)} />
        <AdvancedOptions onChange={setAdvOpts} />
        {loading && <p className="mt-6 animate-pulse">故事生成中…</p>}
        {story && <StoryMeta story={story} meta={meta} />}
        <StoryDisplay story={story} />
      </section>
    </>
  );
}
```

---
### 其他檔案
其餘 `components`、`api`、`utils`、`styles` 等與 v0.2 相同，無需異動。

---
✅ **Step to deploy**
1. `git pull` / 更新 Canvas 內容至本地
2. `npm run dev` 驗證新區塊 → 推送 GitHub
3. Vercel 自動重新部署，首頁即呈現全新 Hero + 產品特色
